// TODO nf-core: Once you have added the required tests, please run the following command to build this file:
// nf-core modules test pcgrhackathon

nextflow_process {

    name "Test Process PCGRHACKATHON"
    script "../main.nf"
    process "PCGRHACKATHON"

    tag "modules"
    tag "modules_RMH"
    tag "pcgrhackathon"

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used
    test("PCGRHACKATHON when vcf no variants - vcf") {

        // TODO nf-core: If you are created a test for a chained module
        // (the module requires running more than one process to generate the required output)
        // add the 'setup' method here.
        // You can find more information about how to use a 'setup' method in the docs (https://nf-co.re/docs/contributing/modules#steps-for-creating-nf-test-for-chained-modules).

        when {
            params{
                outdir = "$outputDir/"
            }
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test1', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true),
                    file('/Users/ljohnson04/Downloads/PCGR/', checkIfExists: true)
                ]
                """
            }
        }

        then {
            // def commandOut = file("${workDir}/.command.out").text
            def commandOutContent = file(process.out.command_out.get(0)).text
            println "Command out content from local: ${commandOutContent}"
                
            // println "process.out: ${process.out.get(0)}"
            assertAll(
                { assert process.success },
                { assert process.out.command_out },
                { 
                assert commandOutContent.contains("INFO - Input VCF contains NO valid variants after VCF cleaning - quitting workflow")
                },
                
                // { assert process.out.get(0).get(2).text.contains("INFO - Input VCF contains NO valid variants after VCF cleaning - quitting workflow") },
                // { assert commandOut.contains("INFO - Input VCF contains NO valid variants after VCF cleaning - quitting workflow") },
                // { assert process.stdout.contains("INFO - Input VCF contains NO valid variants after VCF cleaning - quitting workflow")}
                { assert !file(params.outdir + "PCGRHACKATHON_results/test1.pcgr_acmg.grch37.snvs_indels.tiers.tsv").exists()}
            )
        }
    }
    test ("PCGRHACKATHON when vcf has variants - vcf") {
        when {
            params {
                outdir = "$outputDir/"
            }
            process{
                """
                input[0] = [
                    [ id: 'test2', single_end:false],
                    file("/Users/ljohnson04/pcgr_testvcf/25SP073M0048-25S00010900-T.vcf.gz", checkIfExists: true),
                    file("/Users/ljohnson04/pcgr_testvcf/25SP073M0048-25S00010900-T.vcf.gz.tbi", checkIfExists: true),
                    file('/Users/ljohnson04/Downloads/PCGR/', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert !process.stdout.contains("INFO - Input VCF contains NO valid variants after VCF cleaning - quitting workflow")},
                { assert file(params.outdir + "PCGRHACKATHON_results/test2.pcgr_acmg.grch37.snvs_indels.tiers.tsv").exists()},
                { assert file(params.outdir + "PCGRHACKATHON_results/test2.pcgr_acmg.grch37.snvs_indels.tiers.tsv").size() > 0}
                // { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
                // See https://nf-co.re/docs/contributing/tutorials/nf-test_assertions for more information and examples.
            )
        }

    }

    // TODO nf-core: Change the test name preferably indicating the test-data and file-format used but keep the " - stub" suffix.
    test("PCGRHACKATHON - vcf - stub") {

        options "-stub"

        when {
            process {
                """
                // TODO nf-core: define inputs of the process here. Example:
                
                input[0] = [
                    [ id:'test1', single_end:false ], // meta map
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz', checkIfExists: true),
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/vcf/test.vcf.gz.tbi', checkIfExists: true),
                    file('/Users/ljohnson04/Downloads/PCGR/', checkIfExists: true)
                ]
                """
            }
        }

        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
                //TODO nf-core: Add all required assertions to verify the test output.
            )
        }

    }

}
